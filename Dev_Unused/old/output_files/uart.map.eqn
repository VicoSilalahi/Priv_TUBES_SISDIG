-- Copyright (C) 2024  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.
--C1_o_BUSY is uart_rx:u_RX|o_BUSY
--register power-up is low

C1_o_BUSY = DFFEAS(C1L59, i_CLOCK,  ,  ,  , A1L83,  ,  , !C1_o_BUSY);


--F1_ram_block1a0 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a0
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a0_PORT_A_data_in = C1_r_DATA_BUFFER[1];
F1_ram_block1a0_PORT_A_data_in_reg = DFFE(F1_ram_block1a0_PORT_A_data_in, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a0_PORT_A_address_reg = DFFE(F1_ram_block1a0_PORT_A_address, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a0_PORT_B_address_reg = DFFE(F1_ram_block1a0_PORT_B_address, F1_ram_block1a0_clock_1, , , );
F1_ram_block1a0_PORT_A_write_enable = C1L57;
F1_ram_block1a0_PORT_A_write_enable_reg = DFFE(F1_ram_block1a0_PORT_A_write_enable, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_B_read_enable = VCC;
F1_ram_block1a0_PORT_B_read_enable_reg = DFFE(F1_ram_block1a0_PORT_B_read_enable, F1_ram_block1a0_clock_1, , , );
F1_ram_block1a0_clock_0 = i_CLOCK;
F1_ram_block1a0_clock_1 = i_CLOCK;
F1_ram_block1a0_clock_enable_0 = C1L57;
F1_ram_block1a0_PORT_B_data_out = MEMORY(F1_ram_block1a0_PORT_A_data_in_reg, , F1_ram_block1a0_PORT_A_address_reg, F1_ram_block1a0_PORT_B_address_reg, F1_ram_block1a0_PORT_A_write_enable_reg, , , F1_ram_block1a0_PORT_B_read_enable_reg, , , F1_ram_block1a0_clock_0, F1_ram_block1a0_clock_1, F1_ram_block1a0_clock_enable_0, , , , , );
F1_ram_block1a0 = F1_ram_block1a0_PORT_B_data_out[0];


--F1_ram_block1a1 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a1
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a1_PORT_A_data_in = C1_r_DATA_BUFFER[2];
F1_ram_block1a1_PORT_A_data_in_reg = DFFE(F1_ram_block1a1_PORT_A_data_in, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a1_PORT_A_address_reg = DFFE(F1_ram_block1a1_PORT_A_address, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a1_PORT_B_address_reg = DFFE(F1_ram_block1a1_PORT_B_address, F1_ram_block1a1_clock_1, , , );
F1_ram_block1a1_PORT_A_write_enable = C1L57;
F1_ram_block1a1_PORT_A_write_enable_reg = DFFE(F1_ram_block1a1_PORT_A_write_enable, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_B_read_enable = VCC;
F1_ram_block1a1_PORT_B_read_enable_reg = DFFE(F1_ram_block1a1_PORT_B_read_enable, F1_ram_block1a1_clock_1, , , );
F1_ram_block1a1_clock_0 = i_CLOCK;
F1_ram_block1a1_clock_1 = i_CLOCK;
F1_ram_block1a1_clock_enable_0 = C1L57;
F1_ram_block1a1_PORT_B_data_out = MEMORY(F1_ram_block1a1_PORT_A_data_in_reg, , F1_ram_block1a1_PORT_A_address_reg, F1_ram_block1a1_PORT_B_address_reg, F1_ram_block1a1_PORT_A_write_enable_reg, , , F1_ram_block1a1_PORT_B_read_enable_reg, , , F1_ram_block1a1_clock_0, F1_ram_block1a1_clock_1, F1_ram_block1a1_clock_enable_0, , , , , );
F1_ram_block1a1 = F1_ram_block1a1_PORT_B_data_out[0];


--F1_ram_block1a2 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a2
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a2_PORT_A_data_in = C1_r_DATA_BUFFER[3];
F1_ram_block1a2_PORT_A_data_in_reg = DFFE(F1_ram_block1a2_PORT_A_data_in, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a2_PORT_A_address_reg = DFFE(F1_ram_block1a2_PORT_A_address, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a2_PORT_B_address_reg = DFFE(F1_ram_block1a2_PORT_B_address, F1_ram_block1a2_clock_1, , , );
F1_ram_block1a2_PORT_A_write_enable = C1L57;
F1_ram_block1a2_PORT_A_write_enable_reg = DFFE(F1_ram_block1a2_PORT_A_write_enable, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_B_read_enable = VCC;
F1_ram_block1a2_PORT_B_read_enable_reg = DFFE(F1_ram_block1a2_PORT_B_read_enable, F1_ram_block1a2_clock_1, , , );
F1_ram_block1a2_clock_0 = i_CLOCK;
F1_ram_block1a2_clock_1 = i_CLOCK;
F1_ram_block1a2_clock_enable_0 = C1L57;
F1_ram_block1a2_PORT_B_data_out = MEMORY(F1_ram_block1a2_PORT_A_data_in_reg, , F1_ram_block1a2_PORT_A_address_reg, F1_ram_block1a2_PORT_B_address_reg, F1_ram_block1a2_PORT_A_write_enable_reg, , , F1_ram_block1a2_PORT_B_read_enable_reg, , , F1_ram_block1a2_clock_0, F1_ram_block1a2_clock_1, F1_ram_block1a2_clock_enable_0, , , , , );
F1_ram_block1a2 = F1_ram_block1a2_PORT_B_data_out[0];


--F1_ram_block1a3 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a3
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a3_PORT_A_data_in = C1_r_DATA_BUFFER[4];
F1_ram_block1a3_PORT_A_data_in_reg = DFFE(F1_ram_block1a3_PORT_A_data_in, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a3_PORT_A_address_reg = DFFE(F1_ram_block1a3_PORT_A_address, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a3_PORT_B_address_reg = DFFE(F1_ram_block1a3_PORT_B_address, F1_ram_block1a3_clock_1, , , );
F1_ram_block1a3_PORT_A_write_enable = C1L57;
F1_ram_block1a3_PORT_A_write_enable_reg = DFFE(F1_ram_block1a3_PORT_A_write_enable, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_B_read_enable = VCC;
F1_ram_block1a3_PORT_B_read_enable_reg = DFFE(F1_ram_block1a3_PORT_B_read_enable, F1_ram_block1a3_clock_1, , , );
F1_ram_block1a3_clock_0 = i_CLOCK;
F1_ram_block1a3_clock_1 = i_CLOCK;
F1_ram_block1a3_clock_enable_0 = C1L57;
F1_ram_block1a3_PORT_B_data_out = MEMORY(F1_ram_block1a3_PORT_A_data_in_reg, , F1_ram_block1a3_PORT_A_address_reg, F1_ram_block1a3_PORT_B_address_reg, F1_ram_block1a3_PORT_A_write_enable_reg, , , F1_ram_block1a3_PORT_B_read_enable_reg, , , F1_ram_block1a3_clock_0, F1_ram_block1a3_clock_1, F1_ram_block1a3_clock_enable_0, , , , , );
F1_ram_block1a3 = F1_ram_block1a3_PORT_B_data_out[0];


--F1_ram_block1a4 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a4
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a4_PORT_A_data_in = C1_r_DATA_BUFFER[5];
F1_ram_block1a4_PORT_A_data_in_reg = DFFE(F1_ram_block1a4_PORT_A_data_in, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a4_PORT_A_address_reg = DFFE(F1_ram_block1a4_PORT_A_address, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a4_PORT_B_address_reg = DFFE(F1_ram_block1a4_PORT_B_address, F1_ram_block1a4_clock_1, , , );
F1_ram_block1a4_PORT_A_write_enable = C1L57;
F1_ram_block1a4_PORT_A_write_enable_reg = DFFE(F1_ram_block1a4_PORT_A_write_enable, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_B_read_enable = VCC;
F1_ram_block1a4_PORT_B_read_enable_reg = DFFE(F1_ram_block1a4_PORT_B_read_enable, F1_ram_block1a4_clock_1, , , );
F1_ram_block1a4_clock_0 = i_CLOCK;
F1_ram_block1a4_clock_1 = i_CLOCK;
F1_ram_block1a4_clock_enable_0 = C1L57;
F1_ram_block1a4_PORT_B_data_out = MEMORY(F1_ram_block1a4_PORT_A_data_in_reg, , F1_ram_block1a4_PORT_A_address_reg, F1_ram_block1a4_PORT_B_address_reg, F1_ram_block1a4_PORT_A_write_enable_reg, , , F1_ram_block1a4_PORT_B_read_enable_reg, , , F1_ram_block1a4_clock_0, F1_ram_block1a4_clock_1, F1_ram_block1a4_clock_enable_0, , , , , );
F1_ram_block1a4 = F1_ram_block1a4_PORT_B_data_out[0];


--F1_ram_block1a5 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a5
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a5_PORT_A_data_in = C1_r_DATA_BUFFER[6];
F1_ram_block1a5_PORT_A_data_in_reg = DFFE(F1_ram_block1a5_PORT_A_data_in, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a5_PORT_A_address_reg = DFFE(F1_ram_block1a5_PORT_A_address, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a5_PORT_B_address_reg = DFFE(F1_ram_block1a5_PORT_B_address, F1_ram_block1a5_clock_1, , , );
F1_ram_block1a5_PORT_A_write_enable = C1L57;
F1_ram_block1a5_PORT_A_write_enable_reg = DFFE(F1_ram_block1a5_PORT_A_write_enable, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_B_read_enable = VCC;
F1_ram_block1a5_PORT_B_read_enable_reg = DFFE(F1_ram_block1a5_PORT_B_read_enable, F1_ram_block1a5_clock_1, , , );
F1_ram_block1a5_clock_0 = i_CLOCK;
F1_ram_block1a5_clock_1 = i_CLOCK;
F1_ram_block1a5_clock_enable_0 = C1L57;
F1_ram_block1a5_PORT_B_data_out = MEMORY(F1_ram_block1a5_PORT_A_data_in_reg, , F1_ram_block1a5_PORT_A_address_reg, F1_ram_block1a5_PORT_B_address_reg, F1_ram_block1a5_PORT_A_write_enable_reg, , , F1_ram_block1a5_PORT_B_read_enable_reg, , , F1_ram_block1a5_clock_0, F1_ram_block1a5_clock_1, F1_ram_block1a5_clock_enable_0, , , , , );
F1_ram_block1a5 = F1_ram_block1a5_PORT_B_data_out[0];


--F1_ram_block1a6 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a6
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a6_PORT_A_data_in = C1_r_DATA_BUFFER[7];
F1_ram_block1a6_PORT_A_data_in_reg = DFFE(F1_ram_block1a6_PORT_A_data_in, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a6_PORT_A_address_reg = DFFE(F1_ram_block1a6_PORT_A_address, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a6_PORT_B_address_reg = DFFE(F1_ram_block1a6_PORT_B_address, F1_ram_block1a6_clock_1, , , );
F1_ram_block1a6_PORT_A_write_enable = C1L57;
F1_ram_block1a6_PORT_A_write_enable_reg = DFFE(F1_ram_block1a6_PORT_A_write_enable, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_B_read_enable = VCC;
F1_ram_block1a6_PORT_B_read_enable_reg = DFFE(F1_ram_block1a6_PORT_B_read_enable, F1_ram_block1a6_clock_1, , , );
F1_ram_block1a6_clock_0 = i_CLOCK;
F1_ram_block1a6_clock_1 = i_CLOCK;
F1_ram_block1a6_clock_enable_0 = C1L57;
F1_ram_block1a6_PORT_B_data_out = MEMORY(F1_ram_block1a6_PORT_A_data_in_reg, , F1_ram_block1a6_PORT_A_address_reg, F1_ram_block1a6_PORT_B_address_reg, F1_ram_block1a6_PORT_A_write_enable_reg, , , F1_ram_block1a6_PORT_B_read_enable_reg, , , F1_ram_block1a6_clock_0, F1_ram_block1a6_clock_1, F1_ram_block1a6_clock_enable_0, , , , , );
F1_ram_block1a6 = F1_ram_block1a6_PORT_B_data_out[0];


--F1_ram_block1a7 is uart_rx:u_RX|altsyncram:MEM_UART_rtl_0|altsyncram_f7d1:auto_generated|ram_block1a7
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 256, Port A Width: 1, Port B Depth: 256, Port B Width: 1
--Port A Logical Depth: 256, Port A Logical Width: 8, Port B Logical Depth: 256, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a7_PORT_A_data_in = C1_r_DATA_BUFFER[8];
F1_ram_block1a7_PORT_A_data_in_reg = DFFE(F1_ram_block1a7_PORT_A_data_in, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_A_address = BUS(C1_r_COUNTER[0], C1_r_COUNTER[1], C1_r_COUNTER[2], C1_r_COUNTER[3], C1_r_COUNTER[4], C1_r_COUNTER[5], C1_r_COUNTER[6], C1_r_COUNTER[7]);
F1_ram_block1a7_PORT_A_address_reg = DFFE(F1_ram_block1a7_PORT_A_address, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_B_address = BUS(i_DATA[0], i_DATA[1], i_DATA[2], i_DATA[3], i_DATA[4], i_DATA[5], i_DATA[6], i_DATA[7]);
F1_ram_block1a7_PORT_B_address_reg = DFFE(F1_ram_block1a7_PORT_B_address, F1_ram_block1a7_clock_1, , , );
F1_ram_block1a7_PORT_A_write_enable = C1L57;
F1_ram_block1a7_PORT_A_write_enable_reg = DFFE(F1_ram_block1a7_PORT_A_write_enable, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_B_read_enable = VCC;
F1_ram_block1a7_PORT_B_read_enable_reg = DFFE(F1_ram_block1a7_PORT_B_read_enable, F1_ram_block1a7_clock_1, , , );
F1_ram_block1a7_clock_0 = i_CLOCK;
F1_ram_block1a7_clock_1 = i_CLOCK;
F1_ram_block1a7_clock_enable_0 = C1L57;
F1_ram_block1a7_PORT_B_data_out = MEMORY(F1_ram_block1a7_PORT_A_data_in_reg, , F1_ram_block1a7_PORT_A_address_reg, F1_ram_block1a7_PORT_B_address_reg, F1_ram_block1a7_PORT_A_write_enable_reg, , , F1_ram_block1a7_PORT_B_read_enable_reg, , , F1_ram_block1a7_clock_0, F1_ram_block1a7_clock_1, F1_ram_block1a7_clock_enable_0, , , , , );
F1_ram_block1a7 = F1_ram_block1a7_PORT_B_data_out[0];


--D1_o_BUSY is uart_tx:u_TX|o_BUSY
--register power-up is low

D1_o_BUSY = DFFEAS(D1L18, i_CLOCK,  ,  ,  , s_TX_START,  ,  , !D1_o_BUSY);


--D1_r_PRESCALER[0] is uart_tx:u_TX|r_PRESCALER[0]
--register power-up is low

D1_r_PRESCALER[0] = DFFEAS(D1L44, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[1] is uart_tx:u_TX|r_PRESCALER[1]
--register power-up is low

D1_r_PRESCALER[1] = DFFEAS(D1L47, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[7] is uart_tx:u_TX|r_PRESCALER[7]
--register power-up is low

D1_r_PRESCALER[7] = DFFEAS(D1L65, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[8] is uart_tx:u_TX|r_PRESCALER[8]
--register power-up is low

D1_r_PRESCALER[8] = DFFEAS(D1L68, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[2] is uart_tx:u_TX|r_PRESCALER[2]
--register power-up is low

D1_r_PRESCALER[2] = DFFEAS(D1L50, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[3] is uart_tx:u_TX|r_PRESCALER[3]
--register power-up is low

D1_r_PRESCALER[3] = DFFEAS(D1L53, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[5] is uart_tx:u_TX|r_PRESCALER[5]
--register power-up is low

D1_r_PRESCALER[5] = DFFEAS(D1L59, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[4] is uart_tx:u_TX|r_PRESCALER[4]
--register power-up is low

D1_r_PRESCALER[4] = DFFEAS(D1L56, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[9] is uart_tx:u_TX|r_PRESCALER[9]
--register power-up is low

D1_r_PRESCALER[9] = DFFEAS(D1L71, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[11] is uart_tx:u_TX|r_PRESCALER[11]
--register power-up is low

D1_r_PRESCALER[11] = DFFEAS(D1L77, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[6] is uart_tx:u_TX|r_PRESCALER[6]
--register power-up is low

D1_r_PRESCALER[6] = DFFEAS(D1L62, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[10] is uart_tx:u_TX|r_PRESCALER[10]
--register power-up is low

D1_r_PRESCALER[10] = DFFEAS(D1L74, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--D1_r_PRESCALER[12] is uart_tx:u_TX|r_PRESCALER[12]
--register power-up is low

D1_r_PRESCALER[12] = DFFEAS(D1L80, i_CLOCK,  ,  , D1_o_BUSY,  ,  , D1L8,  );


--C1_r_PRESCALER[2] is uart_rx:u_RX|r_PRESCALER[2]
--register power-up is low

C1_r_PRESCALER[2] = DFFEAS(C1L132, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[0] is uart_rx:u_RX|r_PRESCALER[0]
--register power-up is low

C1_r_PRESCALER[0] = DFFEAS(C1L123, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[1] is uart_rx:u_RX|r_PRESCALER[1]
--register power-up is low

C1_r_PRESCALER[1] = DFFEAS(C1L129, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[3] is uart_rx:u_RX|r_PRESCALER[3]
--register power-up is low

C1_r_PRESCALER[3] = DFFEAS(C1L135, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[6] is uart_rx:u_RX|r_PRESCALER[6]
--register power-up is low

C1_r_PRESCALER[6] = DFFEAS(C1L144, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[7] is uart_rx:u_RX|r_PRESCALER[7]
--register power-up is low

C1_r_PRESCALER[7] = DFFEAS(C1L147, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[4] is uart_rx:u_RX|r_PRESCALER[4]
--register power-up is low

C1_r_PRESCALER[4] = DFFEAS(C1L138, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[5] is uart_rx:u_RX|r_PRESCALER[5]
--register power-up is low

C1_r_PRESCALER[5] = DFFEAS(C1L141, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[8] is uart_rx:u_RX|r_PRESCALER[8]
--register power-up is low

C1_r_PRESCALER[8] = DFFEAS(C1L150, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[11] is uart_rx:u_RX|r_PRESCALER[11]
--register power-up is low

C1_r_PRESCALER[11] = DFFEAS(C1L159, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[9] is uart_rx:u_RX|r_PRESCALER[9]
--register power-up is low

C1_r_PRESCALER[9] = DFFEAS(C1L153, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[10] is uart_rx:u_RX|r_PRESCALER[10]
--register power-up is low

C1_r_PRESCALER[10] = DFFEAS(C1L156, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_PRESCALER[12] is uart_rx:u_RX|r_PRESCALER[12]
--register power-up is low

C1_r_PRESCALER[12] = DFFEAS(C1L162, i_CLOCK,  ,  , C1L164,  ,  , C1L127,  );


--C1_r_COUNTER[0] is uart_rx:u_RX|r_COUNTER[0]
--register power-up is low

C1_r_COUNTER[0] = DFFEAS(C1L64, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[1] is uart_rx:u_RX|r_COUNTER[1]
--register power-up is low

C1_r_COUNTER[1] = DFFEAS(C1L67, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[2] is uart_rx:u_RX|r_COUNTER[2]
--register power-up is low

C1_r_COUNTER[2] = DFFEAS(C1L70, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[3] is uart_rx:u_RX|r_COUNTER[3]
--register power-up is low

C1_r_COUNTER[3] = DFFEAS(C1L73, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[4] is uart_rx:u_RX|r_COUNTER[4]
--register power-up is low

C1_r_COUNTER[4] = DFFEAS(C1L76, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[5] is uart_rx:u_RX|r_COUNTER[5]
--register power-up is low

C1_r_COUNTER[5] = DFFEAS(C1L79, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[6] is uart_rx:u_RX|r_COUNTER[6]
--register power-up is low

C1_r_COUNTER[6] = DFFEAS(C1L82, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--C1_r_COUNTER[7] is uart_rx:u_RX|r_COUNTER[7]
--register power-up is low

C1_r_COUNTER[7] = DFFEAS(C1L85, i_CLOCK,  ,  , C1L57,  ,  ,  ,  );


--D1L44 is uart_tx:u_TX|r_PRESCALER[0]~13
D1L44 = D1_r_PRESCALER[0] $ (VCC);

--D1L45 is uart_tx:u_TX|r_PRESCALER[0]~14
D1L45 = CARRY(D1_r_PRESCALER[0]);


--D1L47 is uart_tx:u_TX|r_PRESCALER[1]~15
D1L47 = (D1_r_PRESCALER[1] & (!D1L45)) # (!D1_r_PRESCALER[1] & ((D1L45) # (GND)));

--D1L48 is uart_tx:u_TX|r_PRESCALER[1]~16
D1L48 = CARRY((!D1L45) # (!D1_r_PRESCALER[1]));


--D1L50 is uart_tx:u_TX|r_PRESCALER[2]~17
D1L50 = (D1_r_PRESCALER[2] & (D1L48 $ (GND))) # (!D1_r_PRESCALER[2] & (!D1L48 & VCC));

--D1L51 is uart_tx:u_TX|r_PRESCALER[2]~18
D1L51 = CARRY((D1_r_PRESCALER[2] & !D1L48));


--D1L53 is uart_tx:u_TX|r_PRESCALER[3]~19
D1L53 = (D1_r_PRESCALER[3] & (!D1L51)) # (!D1_r_PRESCALER[3] & ((D1L51) # (GND)));

--D1L54 is uart_tx:u_TX|r_PRESCALER[3]~20
D1L54 = CARRY((!D1L51) # (!D1_r_PRESCALER[3]));


--D1L56 is uart_tx:u_TX|r_PRESCALER[4]~21
D1L56 = (D1_r_PRESCALER[4] & (D1L54 $ (GND))) # (!D1_r_PRESCALER[4] & (!D1L54 & VCC));

--D1L57 is uart_tx:u_TX|r_PRESCALER[4]~22
D1L57 = CARRY((D1_r_PRESCALER[4] & !D1L54));


--D1L59 is uart_tx:u_TX|r_PRESCALER[5]~23
D1L59 = (D1_r_PRESCALER[5] & (!D1L57)) # (!D1_r_PRESCALER[5] & ((D1L57) # (GND)));

--D1L60 is uart_tx:u_TX|r_PRESCALER[5]~24
D1L60 = CARRY((!D1L57) # (!D1_r_PRESCALER[5]));


--D1L62 is uart_tx:u_TX|r_PRESCALER[6]~25
D1L62 = (D1_r_PRESCALER[6] & (D1L60 $ (GND))) # (!D1_r_PRESCALER[6] & (!D1L60 & VCC));

--D1L63 is uart_tx:u_TX|r_PRESCALER[6]~26
D1L63 = CARRY((D1_r_PRESCALER[6] & !D1L60));


--D1L65 is uart_tx:u_TX|r_PRESCALER[7]~27
D1L65 = (D1_r_PRESCALER[7] & (!D1L63)) # (!D1_r_PRESCALER[7] & ((D1L63) # (GND)));

--D1L66 is uart_tx:u_TX|r_PRESCALER[7]~28
D1L66 = CARRY((!D1L63) # (!D1_r_PRESCALER[7]));


--D1L68 is uart_tx:u_TX|r_PRESCALER[8]~29
D1L68 = (D1_r_PRESCALER[8] & (D1L66 $ (GND))) # (!D1_r_PRESCALER[8] & (!D1L66 & VCC));

--D1L69 is uart_tx:u_TX|r_PRESCALER[8]~30
D1L69 = CARRY((D1_r_PRESCALER[8] & !D1L66));


--D1L71 is uart_tx:u_TX|r_PRESCALER[9]~31
D1L71 = (D1_r_PRESCALER[9] & (!D1L69)) # (!D1_r_PRESCALER[9] & ((D1L69) # (GND)));

--D1L72 is uart_tx:u_TX|r_PRESCALER[9]~32
D1L72 = CARRY((!D1L69) # (!D1_r_PRESCALER[9]));


--D1L74 is uart_tx:u_TX|r_PRESCALER[10]~33
D1L74 = (D1_r_PRESCALER[10] & (D1L72 $ (GND))) # (!D1_r_PRESCALER[10] & (!D1L72 & VCC));

--D1L75 is uart_tx:u_TX|r_PRESCALER[10]~34
D1L75 = CARRY((D1_r_PRESCALER[10] & !D1L72));


--D1L77 is uart_tx:u_TX|r_PRESCALER[11]~35
D1L77 = (D1_r_PRESCALER[11] & (!D1L75)) # (!D1_r_PRESCALER[11] & ((D1L75) # (GND)));

--D1L78 is uart_tx:u_TX|r_PRESCALER[11]~36
D1L78 = CARRY((!D1L75) # (!D1_r_PRESCALER[11]));


--D1L80 is uart_tx:u_TX|r_PRESCALER[12]~37
D1L80 = D1_r_PRESCALER[12] $ (!D1L78);


--C1L123 is uart_rx:u_RX|r_PRESCALER[0]~13
C1L123 = C1_r_PRESCALER[0] $ (VCC);

--C1L124 is uart_rx:u_RX|r_PRESCALER[0]~14
C1L124 = CARRY(C1_r_PRESCALER[0]);


--C1L129 is uart_rx:u_RX|r_PRESCALER[1]~15
C1L129 = (C1_r_PRESCALER[1] & (!C1L124)) # (!C1_r_PRESCALER[1] & ((C1L124) # (GND)));

--C1L130 is uart_rx:u_RX|r_PRESCALER[1]~16
C1L130 = CARRY((!C1L124) # (!C1_r_PRESCALER[1]));


--C1L132 is uart_rx:u_RX|r_PRESCALER[2]~17
C1L132 = (C1_r_PRESCALER[2] & (C1L130 $ (GND))) # (!C1_r_PRESCALER[2] & (!C1L130 & VCC));

--C1L133 is uart_rx:u_RX|r_PRESCALER[2]~18
C1L133 = CARRY((C1_r_PRESCALER[2] & !C1L130));


--C1L135 is uart_rx:u_RX|r_PRESCALER[3]~23
C1L135 = (C1_r_PRESCALER[3] & (!C1L133)) # (!C1_r_PRESCALER[3] & ((C1L133) # (GND)));

--C1L136 is uart_rx:u_RX|r_PRESCALER[3]~24
C1L136 = CARRY((!C1L133) # (!C1_r_PRESCALER[3]));


--C1L138 is uart_rx:u_RX|r_PRESCALER[4]~25
C1L138 = (C1_r_PRESCALER[4] & (C1L136 $ (GND))) # (!C1_r_PRESCALER[4] & (!C1L136 & VCC));

--C1L139 is uart_rx:u_RX|r_PRESCALER[4]~26
C1L139 = CARRY((C1_r_PRESCALER[4] & !C1L136));


--C1L141 is uart_rx:u_RX|r_PRESCALER[5]~27
C1L141 = (C1_r_PRESCALER[5] & (!C1L139)) # (!C1_r_PRESCALER[5] & ((C1L139) # (GND)));

--C1L142 is uart_rx:u_RX|r_PRESCALER[5]~28
C1L142 = CARRY((!C1L139) # (!C1_r_PRESCALER[5]));


--C1L144 is uart_rx:u_RX|r_PRESCALER[6]~29
C1L144 = (C1_r_PRESCALER[6] & (C1L142 $ (GND))) # (!C1_r_PRESCALER[6] & (!C1L142 & VCC));

--C1L145 is uart_rx:u_RX|r_PRESCALER[6]~30
C1L145 = CARRY((C1_r_PRESCALER[6] & !C1L142));


--C1L147 is uart_rx:u_RX|r_PRESCALER[7]~31
C1L147 = (C1_r_PRESCALER[7] & (!C1L145)) # (!C1_r_PRESCALER[7] & ((C1L145) # (GND)));

--C1L148 is uart_rx:u_RX|r_PRESCALER[7]~32
C1L148 = CARRY((!C1L145) # (!C1_r_PRESCALER[7]));


--C1L150 is uart_rx:u_RX|r_PRESCALER[8]~33
C1L150 = (C1_r_PRESCALER[8] & (C1L148 $ (GND))) # (!C1_r_PRESCALER[8] & (!C1L148 & VCC));

--C1L151 is uart_rx:u_RX|r_PRESCALER[8]~34
C1L151 = CARRY((C1_r_PRESCALER[8] & !C1L148));


--C1L153 is uart_rx:u_RX|r_PRESCALER[9]~35
C1L153 = (C1_r_PRESCALER[9] & (!C1L151)) # (!C1_r_PRESCALER[9] & ((C1L151) # (GND)));

--C1L154 is uart_rx:u_RX|r_PRESCALER[9]~36
C1L154 = CARRY((!C1L151) # (!C1_r_PRESCALER[9]));


--C1L156 is uart_rx:u_RX|r_PRESCALER[10]~37
C1L156 = (C1_r_PRESCALER[10] & (C1L154 $ (GND))) # (!C1_r_PRESCALER[10] & (!C1L154 & VCC));

--C1L157 is uart_rx:u_RX|r_PRESCALER[10]~38
C1L157 = CARRY((C1_r_PRESCALER[10] & !C1L154));


--C1L159 is uart_rx:u_RX|r_PRESCALER[11]~39
C1L159 = (C1_r_PRESCALER[11] & (!C1L157)) # (!C1_r_PRESCALER[11] & ((C1L157) # (GND)));

--C1L160 is uart_rx:u_RX|r_PRESCALER[11]~40
C1L160 = CARRY((!C1L157) # (!C1_r_PRESCALER[11]));


--C1L162 is uart_rx:u_RX|r_PRESCALER[12]~41
C1L162 = C1_r_PRESCALER[12] $ (!C1L160);


--C1L64 is uart_rx:u_RX|r_COUNTER[0]~8
C1L64 = C1_r_COUNTER[0] $ (VCC);

--C1L65 is uart_rx:u_RX|r_COUNTER[0]~9
C1L65 = CARRY(C1_r_COUNTER[0]);


--C1L67 is uart_rx:u_RX|r_COUNTER[1]~10
C1L67 = (C1_r_COUNTER[1] & (!C1L65)) # (!C1_r_COUNTER[1] & ((C1L65) # (GND)));

--C1L68 is uart_rx:u_RX|r_COUNTER[1]~11
C1L68 = CARRY((!C1L65) # (!C1_r_COUNTER[1]));


--C1L70 is uart_rx:u_RX|r_COUNTER[2]~12
C1L70 = (C1_r_COUNTER[2] & (C1L68 $ (GND))) # (!C1_r_COUNTER[2] & (!C1L68 & VCC));

--C1L71 is uart_rx:u_RX|r_COUNTER[2]~13
C1L71 = CARRY((C1_r_COUNTER[2] & !C1L68));


--C1L73 is uart_rx:u_RX|r_COUNTER[3]~14
C1L73 = (C1_r_COUNTER[3] & (!C1L71)) # (!C1_r_COUNTER[3] & ((C1L71) # (GND)));

--C1L74 is uart_rx:u_RX|r_COUNTER[3]~15
C1L74 = CARRY((!C1L71) # (!C1_r_COUNTER[3]));


--C1L76 is uart_rx:u_RX|r_COUNTER[4]~16
C1L76 = (C1_r_COUNTER[4] & (C1L74 $ (GND))) # (!C1_r_COUNTER[4] & (!C1L74 & VCC));

--C1L77 is uart_rx:u_RX|r_COUNTER[4]~17
C1L77 = CARRY((C1_r_COUNTER[4] & !C1L74));


--C1L79 is uart_rx:u_RX|r_COUNTER[5]~18
C1L79 = (C1_r_COUNTER[5] & (!C1L77)) # (!C1_r_COUNTER[5] & ((C1L77) # (GND)));

--C1L80 is uart_rx:u_RX|r_COUNTER[5]~19
C1L80 = CARRY((!C1L77) # (!C1_r_COUNTER[5]));


--C1L82 is uart_rx:u_RX|r_COUNTER[6]~20
C1L82 = (C1_r_COUNTER[6] & (C1L80 $ (GND))) # (!C1_r_COUNTER[6] & (!C1L80 & VCC));

--C1L83 is uart_rx:u_RX|r_COUNTER[6]~21
C1L83 = CARRY((C1_r_COUNTER[6] & !C1L80));


--C1L85 is uart_rx:u_RX|r_COUNTER[7]~22
C1L85 = C1_r_COUNTER[7] $ (C1L83);


--A1L1 is Add0~0
A1L1 = s_button_counter[0] $ (VCC);

--A1L2 is Add0~1
A1L2 = CARRY(s_button_counter[0]);


--A1L3 is Add0~2
A1L3 = (s_button_counter[1] & (!A1L2)) # (!s_button_counter[1] & ((A1L2) # (GND)));

--A1L4 is Add0~3
A1L4 = CARRY((!A1L2) # (!s_button_counter[1]));


--A1L5 is Add0~4
A1L5 = (s_button_counter[2] & (A1L4 $ (GND))) # (!s_button_counter[2] & (!A1L4 & VCC));

--A1L6 is Add0~5
A1L6 = CARRY((s_button_counter[2] & !A1L4));


--A1L7 is Add0~6
A1L7 = (s_button_counter[3] & (!A1L6)) # (!s_button_counter[3] & ((A1L6) # (GND)));

--A1L8 is Add0~7
A1L8 = CARRY((!A1L6) # (!s_button_counter[3]));


--A1L9 is Add0~8
A1L9 = (s_button_counter[4] & (A1L8 $ (GND))) # (!s_button_counter[4] & (!A1L8 & VCC));

--A1L10 is Add0~9
A1L10 = CARRY((s_button_counter[4] & !A1L8));


--A1L11 is Add0~10
A1L11 = (s_button_counter[5] & (!A1L10)) # (!s_button_counter[5] & ((A1L10) # (GND)));

--A1L12 is Add0~11
A1L12 = CARRY((!A1L10) # (!s_button_counter[5]));


--A1L13 is Add0~12
A1L13 = (s_button_counter[6] & (A1L12 $ (GND))) # (!s_button_counter[6] & (!A1L12 & VCC));

--A1L14 is Add0~13
A1L14 = CARRY((s_button_counter[6] & !A1L12));


--A1L15 is Add0~14
A1L15 = (s_button_counter[7] & (!A1L14)) # (!s_button_counter[7] & ((A1L14) # (GND)));

--A1L16 is Add0~15
A1L16 = CARRY((!A1L14) # (!s_button_counter[7]));


--A1L17 is Add0~16
A1L17 = (s_button_counter[8] & (A1L16 $ (GND))) # (!s_button_counter[8] & (!A1L16 & VCC));

--A1L18 is Add0~17
A1L18 = CARRY((s_button_counter[8] & !A1L16));


--A1L19 is Add0~18
A1L19 = (s_button_counter[9] & (!A1L18)) # (!s_button_counter[9] & ((A1L18) # (GND)));

--A1L20 is Add0~19
A1L20 = CARRY((!A1L18) # (!s_button_counter[9]));


--A1L21 is Add0~20
A1L21 = (s_button_counter[10] & (A1L20 $ (GND))) # (!s_button_counter[10] & (!A1L20 & VCC));

--A1L22 is Add0~21
A1L22 = CARRY((s_button_counter[10] & !A1L20));


--A1L23 is Add0~22
A1L23 = (s_button_counter[11] & (!A1L22)) # (!s_button_counter[11] & ((A1L22) # (GND)));

--A1L24 is Add0~23
A1L24 = CARRY((!A1L22) # (!s_button_counter[11]));


--A1L25 is Add0~24
A1L25 = (s_button_counter[12] & (A1L24 $ (GND))) # (!s_button_counter[12] & (!A1L24 & VCC));

--A1L26 is Add0~25
A1L26 = CARRY((s_button_counter[12] & !A1L24));


--A1L27 is Add0~26
A1L27 = (s_button_counter[13] & (!A1L26)) # (!s_button_counter[13] & ((A1L26) # (GND)));

--A1L28 is Add0~27
A1L28 = CARRY((!A1L26) # (!s_button_counter[13]));


--A1L29 is Add0~28
A1L29 = (s_button_counter[14] & (A1L28 $ (GND))) # (!s_button_counter[14] & (!A1L28 & VCC));

--A1L30 is Add0~29
A1L30 = CARRY((s_button_counter[14] & !A1L28));


--A1L31 is Add0~30
A1L31 = (s_button_counter[15] & (!A1L30)) # (!s_button_counter[15] & ((A1L30) # (GND)));

--A1L32 is Add0~31
A1L32 = CARRY((!A1L30) # (!s_button_counter[15]));


--A1L33 is Add0~32
A1L33 = (s_button_counter[16] & (A1L32 $ (GND))) # (!s_button_counter[16] & (!A1L32 & VCC));

--A1L34 is Add0~33
A1L34 = CARRY((s_button_counter[16] & !A1L32));


--A1L35 is Add0~34
A1L35 = (s_button_counter[17] & (!A1L34)) # (!s_button_counter[17] & ((A1L34) # (GND)));

--A1L36 is Add0~35
A1L36 = CARRY((!A1L34) # (!s_button_counter[17]));


--A1L37 is Add0~36
A1L37 = (s_button_counter[18] & (A1L36 $ (GND))) # (!s_button_counter[18] & (!A1L36 & VCC));

--A1L38 is Add0~37
A1L38 = CARRY((s_button_counter[18] & !A1L36));


--A1L39 is Add0~38
A1L39 = (s_button_counter[19] & (!A1L38)) # (!s_button_counter[19] & ((A1L38) # (GND)));

--A1L40 is Add0~39
A1L40 = CARRY((!A1L38) # (!s_button_counter[19]));


--A1L41 is Add0~40
A1L41 = (s_button_counter[20] & (A1L40 $ (GND))) # (!s_button_counter[20] & (!A1L40 & VCC));

--A1L42 is Add0~41
A1L42 = CARRY((s_button_counter[20] & !A1L40));


--A1L43 is Add0~42
A1L43 = (s_button_counter[21] & (!A1L42)) # (!s_button_counter[21] & ((A1L42) # (GND)));

--A1L44 is Add0~43
A1L44 = CARRY((!A1L42) # (!s_button_counter[21]));


--A1L45 is Add0~44
A1L45 = (s_button_counter[22] & (A1L44 $ (GND))) # (!s_button_counter[22] & (!A1L44 & VCC));

--A1L46 is Add0~45
A1L46 = CARRY((s_button_counter[22] & !A1L44));


--A1L47 is Add0~46
A1L47 = (s_button_counter[23] & (!A1L46)) # (!s_button_counter[23] & ((A1L46) # (GND)));

--A1L48 is Add0~47
A1L48 = CARRY((!A1L46) # (!s_button_counter[23]));


--A1L49 is Add0~48
A1L49 = (s_button_counter[24] & (A1L48 $ (GND))) # (!s_button_counter[24] & (!A1L48 & VCC));

--A1L50 is Add0~49
A1L50 = CARRY((s_button_counter[24] & !A1L48));


--A1L51 is Add0~50
A1L51 = s_button_counter[25] $ (A1L50);


--o_TX is o_TX
o_TX = OUTPUT(D1L20);


--i_log_ADDR[0] is i_log_ADDR[0]
i_log_ADDR[0] = INPUT();


--i_log_ADDR[1] is i_log_ADDR[1]
i_log_ADDR[1] = INPUT();


--i_log_ADDR[2] is i_log_ADDR[2]
i_log_ADDR[2] = INPUT();


--i_log_ADDR[3] is i_log_ADDR[3]
i_log_ADDR[3] = INPUT();


--i_log_ADDR[4] is i_log_ADDR[4]
i_log_ADDR[4] = INPUT();


--i_log_ADDR[5] is i_log_ADDR[5]
i_log_ADDR[5] = INPUT();


--i_log_ADDR[6] is i_log_ADDR[6]
i_log_ADDR[6] = INPUT();


--i_log_ADDR[7] is i_log_ADDR[7]
i_log_ADDR[7] = INPUT();


--o_sig_CRRP_DATA is o_sig_CRRP_DATA
o_sig_CRRP_DATA = OUTPUT(C1_o_sig_CRRP_DATA);


--o_sig_RX_BUSY is o_sig_RX_BUSY
o_sig_RX_BUSY = OUTPUT(C1_o_BUSY);


--o_sig_TX_BUSY is o_sig_TX_BUSY
o_sig_TX_BUSY = OUTPUT(A1L169);


--o_DATA_OUT[0] is o_DATA_OUT[0]
o_DATA_OUT[0] = OUTPUT(C1L48);


--o_DATA_OUT[1] is o_DATA_OUT[1]
o_DATA_OUT[1] = OUTPUT(C1L49);


--o_DATA_OUT[2] is o_DATA_OUT[2]
o_DATA_OUT[2] = OUTPUT(C1L50);


--o_DATA_OUT[3] is o_DATA_OUT[3]
o_DATA_OUT[3] = OUTPUT(C1L51);


--o_DATA_OUT[4] is o_DATA_OUT[4]
o_DATA_OUT[4] = OUTPUT(C1L52);


--o_DATA_OUT[5] is o_DATA_OUT[5]
o_DATA_OUT[5] = OUTPUT(C1L53);


--o_DATA_OUT[6] is o_DATA_OUT[6]
o_DATA_OUT[6] = OUTPUT(C1L54);


--o_DATA_OUT[7] is o_DATA_OUT[7]
o_DATA_OUT[7] = OUTPUT(C1L55);


--o_hex[0] is o_hex[0]
o_hex[0] = OUTPUT(B1L38);


--o_hex[1] is o_hex[1]
o_hex[1] = OUTPUT(B1L32);


--o_hex[2] is o_hex[2]
o_hex[2] = OUTPUT(B1L25);


--o_hex[3] is o_hex[3]
o_hex[3] = OUTPUT(B1L19);


--o_hex[4] is o_hex[4]
o_hex[4] = OUTPUT(B1L13);


--o_hex[5] is o_hex[5]
o_hex[5] = OUTPUT(B1L10);


--o_hex[6] is o_hex[6]
o_hex[6] = OUTPUT(B1L4);


--D1_o_TX_LINE is uart_tx:u_TX|o_TX_LINE
--register power-up is low

D1_o_TX_LINE = DFFEAS(D1L16, i_CLOCK,  ,  , D1L34,  ,  ,  ,  );


--C1_o_sig_CRRP_DATA is uart_rx:u_RX|o_sig_CRRP_DATA
--register power-up is low

C1_o_sig_CRRP_DATA = DFFEAS(C1L61, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L34Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[17]
--register power-up is low

C1L34Q = DFFEAS(C1_r_DATA_BUFFER[1], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L17Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[0]
--register power-up is low

C1L17Q = DFFEAS(C1L57, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L18Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[1]
--register power-up is low

C1L18Q = DFFEAS(C1_r_COUNTER[0], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L20Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[3]
--register power-up is low

C1L20Q = DFFEAS(C1_r_COUNTER[1], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L21Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[4]
--register power-up is low

C1L21Q = DFFEAS(i_DATA[1], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L19Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[2]
--register power-up is low

C1L19Q = DFFEAS(i_DATA[0], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L42 is uart_rx:u_RX|MEM_UART~17
C1L42 = (C1L18Q & (C1L19Q & (C1L20Q $ (!C1L21Q)))) # (!C1L18Q & (!C1L19Q & (C1L20Q $ (!C1L21Q))));


--C1L22Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[5]
--register power-up is low

C1L22Q = DFFEAS(C1_r_COUNTER[2], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L24Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[7]
--register power-up is low

C1L24Q = DFFEAS(C1_r_COUNTER[3], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L25Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[8]
--register power-up is low

C1L25Q = DFFEAS(i_DATA[3], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L23Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[6]
--register power-up is low

C1L23Q = DFFEAS(i_DATA[2], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L43 is uart_rx:u_RX|MEM_UART~18
C1L43 = (C1L22Q & (C1L23Q & (C1L24Q $ (!C1L25Q)))) # (!C1L22Q & (!C1L23Q & (C1L24Q $ (!C1L25Q))));


--C1L26Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[9]
--register power-up is low

C1L26Q = DFFEAS(C1_r_COUNTER[4], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L28Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[11]
--register power-up is low

C1L28Q = DFFEAS(C1_r_COUNTER[5], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L29Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[12]
--register power-up is low

C1L29Q = DFFEAS(i_DATA[5], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L27Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[10]
--register power-up is low

C1L27Q = DFFEAS(i_DATA[4], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L44 is uart_rx:u_RX|MEM_UART~19
C1L44 = (C1L26Q & (C1L27Q & (C1L28Q $ (!C1L29Q)))) # (!C1L26Q & (!C1L27Q & (C1L28Q $ (!C1L29Q))));


--C1L30Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[13]
--register power-up is low

C1L30Q = DFFEAS(C1_r_COUNTER[6], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L31Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[14]
--register power-up is low

C1L31Q = DFFEAS(i_DATA[6], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L32Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[15]
--register power-up is low

C1L32Q = DFFEAS(C1_r_COUNTER[7], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L33Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[16]
--register power-up is low

C1L33Q = DFFEAS(i_DATA[7], i_CLOCK,  ,  , A1L106,  ,  ,  ,  );


--C1L45 is uart_rx:u_RX|MEM_UART~20
C1L45 = C1L32Q $ (C1L33Q);


--C1L46 is uart_rx:u_RX|MEM_UART~21
C1L46 = (C1L44 & (!C1L45 & (C1L30Q $ (!C1L31Q))));


--C1L47 is uart_rx:u_RX|MEM_UART~22
C1L47 = (C1L17Q & (C1L42 & (C1L43 & C1L46)));


--C1L48 is uart_rx:u_RX|MEM_UART~23
C1L48 = (C1L47 & (C1L34Q)) # (!C1L47 & ((F1_ram_block1a0)));


--C1L35Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[18]
--register power-up is low

C1L35Q = DFFEAS(C1_r_DATA_BUFFER[2], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L49 is uart_rx:u_RX|MEM_UART~24
C1L49 = (C1L47 & (C1L35Q)) # (!C1L47 & ((F1_ram_block1a1)));


--C1L36Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[19]
--register power-up is low

C1L36Q = DFFEAS(C1_r_DATA_BUFFER[3], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L50 is uart_rx:u_RX|MEM_UART~25
C1L50 = (C1L47 & (C1L36Q)) # (!C1L47 & ((F1_ram_block1a2)));


--C1L37Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[20]
--register power-up is low

C1L37Q = DFFEAS(C1_r_DATA_BUFFER[4], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L51 is uart_rx:u_RX|MEM_UART~26
C1L51 = (C1L47 & (C1L37Q)) # (!C1L47 & ((F1_ram_block1a3)));


--C1L38Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[21]
--register power-up is low

C1L38Q = DFFEAS(C1_r_DATA_BUFFER[5], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L52 is uart_rx:u_RX|MEM_UART~27
C1L52 = (C1L47 & (C1L38Q)) # (!C1L47 & ((F1_ram_block1a4)));


--C1L39Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[22]
--register power-up is low

C1L39Q = DFFEAS(C1_r_DATA_BUFFER[6], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L53 is uart_rx:u_RX|MEM_UART~28
C1L53 = (C1L47 & (C1L39Q)) # (!C1L47 & ((F1_ram_block1a5)));


--C1L40Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[23]
--register power-up is low

C1L40Q = DFFEAS(C1_r_DATA_BUFFER[7], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L54 is uart_rx:u_RX|MEM_UART~29
C1L54 = (C1L47 & (C1L40Q)) # (!C1L47 & ((F1_ram_block1a6)));


--C1L41Q is uart_rx:u_RX|MEM_UART_rtl_0_bypass[24]
--register power-up is low

C1L41Q = DFFEAS(C1_r_DATA_BUFFER[8], i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L55 is uart_rx:u_RX|MEM_UART~30
C1L55 = (C1L47 & (C1L41Q)) # (!C1L47 & ((F1_ram_block1a7)));


--B1L34 is asciiHex:a2h|Mux6~4
B1L34 = (C1L52 & (((C1L53 & !C1L54)))) # (!C1L52 & (!C1L48 & (!C1L53 & C1L54)));


--B1L35 is asciiHex:a2h|Mux6~5
B1L35 = (C1L54 & (!C1L48 & (!C1L52 & !C1L53)));


--B1L36 is asciiHex:a2h|Mux6~6
B1L36 = (C1L51 & ((C1L49 & ((!B1L35))) # (!C1L49 & (!B1L34))));


--B1L1 is asciiHex:a2h|Mux0~0
B1L1 = (!C1L55 & ((C1L51) # (C1L52 $ (!C1L53))));


--B1L37 is asciiHex:a2h|Mux6~7
B1L37 = (B1L1 & ((!C1L51) # (!C1L50)));


--B1L38 is asciiHex:a2h|Mux6~8
B1L38 = (B1L36) # ((B1L41) # (!B1L37));


--B1L26 is asciiHex:a2h|Mux5~4
B1L26 = (C1L54 & ((C1L52) # (C1L53))) # (!C1L54 & (C1L52 & C1L53));


--B1L27 is asciiHex:a2h|Mux5~5
B1L27 = (!C1L55 & ((C1L51 & (!C1L50)) # (!C1L51 & ((C1L48)))));


--B1L28 is asciiHex:a2h|Mux5~6
B1L28 = (B1L33 & (C1L49 $ (((!B1L27))))) # (!B1L33 & ((C1L49 & (C1L50 & !B1L27)) # (!C1L49 & (!C1L50 & B1L27))));


--B1L29 is asciiHex:a2h|Mux5~7
B1L29 = (B1L27 & (C1L50 $ (((C1L49) # (B1L33))))) # (!B1L27 & (((B1L33))));


--B1L30 is asciiHex:a2h|Mux5~8
B1L30 = (C1L49 & ((B1L29) # ((!C1L54 & !B1L28)))) # (!C1L49 & (B1L28 $ (((C1L54 & !B1L29)))));


--B1L31 is asciiHex:a2h|Mux5~9
B1L31 = (C1L49 & ((B1L29 & ((B1L28))) # (!B1L29 & (C1L54)))) # (!C1L49 & (C1L54 & (B1L28 $ (B1L29))));


--B1L32 is asciiHex:a2h|Mux5~10
B1L32 = (B1L30 & (((!B1L31)) # (!B1L35))) # (!B1L30 & ((B1L26 $ (!B1L31))));


--B1L22 is asciiHex:a2h|Mux4~0
B1L22 = (C1L48) # ((C1L49 & ((C1L51))) # (!C1L49 & (C1L50)));


--B1L23 is asciiHex:a2h|Mux4~1
B1L23 = (C1L55) # ((!C1L54 & ((B1L22) # (!B1L20))));


--B1L24 is asciiHex:a2h|Mux4~2
B1L24 = (C1L50 & (((!C1L51)))) # (!C1L50 & ((C1L48 & ((!C1L51) # (!C1L49))) # (!C1L48 & ((C1L49) # (C1L51)))));


--B1L25 is asciiHex:a2h|Mux4~3
B1L25 = (B1L23) # ((C1L54 & ((!B1L24) # (!B1L39))));


--B1L15 is asciiHex:a2h|Mux3~6
B1L15 = (C1L54 & ((C1L53) # (C1L52))) # (!C1L54 & (C1L53 & C1L52));


--B1L16 is asciiHex:a2h|Mux3~7
B1L16 = (!C1L54 & ((C1L51 & (B1L20)) # (!C1L51 & ((B1L15)))));


--B1L17 is asciiHex:a2h|Mux3~8
B1L17 = (C1L49 & (((B1L21)))) # (!C1L49 & (B1L16 & ((!B1L21) # (!C1L48))));


--B1L18 is asciiHex:a2h|Mux3~9
B1L18 = (B1L21 & ((C1L49 & (C1L48 $ (B1L16))) # (!C1L49 & ((C1L48) # (!B1L16)))));


--B1L19 is asciiHex:a2h|Mux3~10
B1L19 = (C1L55) # ((C1L50 & ((!B1L18))) # (!C1L50 & (!B1L17)));


--B1L11 is asciiHex:a2h|Mux2~2
B1L11 = (C1L48 & ((C1L53) # (!C1L50))) # (!C1L48 & (C1L50));


--B1L12 is asciiHex:a2h|Mux2~3
B1L12 = (C1L54 & (!C1L53 & (C1L49 $ (B1L11)))) # (!C1L54 & (C1L53 & ((B1L11) # (!C1L49))));


--B1L13 is asciiHex:a2h|Mux2~4
B1L13 = ((C1L51 & ((!B1L14))) # (!C1L51 & (!B1L12))) # (!B1L37);


--B1L7 is asciiHex:a2h|Mux1~0
B1L7 = (C1L50 & ((C1L51) # (C1L48 $ (C1L49)))) # (!C1L50 & (((C1L49 & C1L51))));


--B1L8 is asciiHex:a2h|Mux1~1
B1L8 = (C1L55) # ((!C1L54 & ((B1L7) # (!B1L20))));


--B1L9 is asciiHex:a2h|Mux1~2
B1L9 = (!C1L49 & ((C1L48 & (!C1L50 & !C1L51)) # (!C1L48 & (C1L50 $ (C1L51)))));


--B1L10 is asciiHex:a2h|Mux1~3
B1L10 = (B1L8) # ((C1L54 & ((!B1L9) # (!B1L39))));


--B1L2 is asciiHex:a2h|Mux0~1
B1L2 = (!C1L49 & ((C1L54) # ((!C1L53) # (!C1L52))));


--B1L3 is asciiHex:a2h|Mux0~2
B1L3 = (C1L50) # ((B1L2) # ((C1L49 & !B1L35)));


--B1L4 is asciiHex:a2h|Mux0~3
B1L4 = (B1L6) # (((C1L51 & B1L3)) # (!B1L1));


--D1_r_INDEX[3] is uart_tx:u_TX|r_INDEX[3]
--register power-up is low

D1_r_INDEX[3] = DFFEAS(D1L38, i_CLOCK,  ,  , D1L34,  ,  ,  ,  );


--D1_r_INDEX[0] is uart_tx:u_TX|r_INDEX[0]
--register power-up is low

D1_r_INDEX[0] = DFFEAS(D1L39, i_CLOCK,  ,  , D1L34,  ,  ,  ,  );


--D1_r_DATA_BUFFER[8] is uart_tx:u_TX|r_DATA_BUFFER[8]
--register power-up is low

D1_r_DATA_BUFFER[8] = DFFEAS(r_TX_DATA[7], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1_r_INDEX[1] is uart_tx:u_TX|r_INDEX[1]
--register power-up is low

D1_r_INDEX[1] = DFFEAS(D1L40, i_CLOCK,  ,  , D1L34,  ,  ,  ,  );


--D1L10 is uart_tx:u_TX|Mux0~0
D1L10 = (D1_r_INDEX[3] & (!D1_r_INDEX[1] & ((D1_r_INDEX[0]) # (!D1_r_DATA_BUFFER[8]))));


--D1_r_DATA_BUFFER[2] is uart_tx:u_TX|r_DATA_BUFFER[2]
--register power-up is low

D1_r_DATA_BUFFER[2] = DFFEAS(r_TX_DATA[1], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1_r_DATA_BUFFER[1] is uart_tx:u_TX|r_DATA_BUFFER[1]
--register power-up is low

D1_r_DATA_BUFFER[1] = DFFEAS(r_TX_DATA[0], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1_r_DATA_BUFFER[0] is uart_tx:u_TX|r_DATA_BUFFER[0]
--register power-up is low

D1_r_DATA_BUFFER[0] = DFFEAS(VCC, i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1L11 is uart_tx:u_TX|Mux0~1
D1L11 = (D1_r_INDEX[1] & (((D1_r_INDEX[0])))) # (!D1_r_INDEX[1] & ((D1_r_INDEX[0] & (!D1_r_DATA_BUFFER[1])) # (!D1_r_INDEX[0] & ((!D1_r_DATA_BUFFER[0])))));


--D1_r_DATA_BUFFER[3] is uart_tx:u_TX|r_DATA_BUFFER[3]
--register power-up is low

D1_r_DATA_BUFFER[3] = DFFEAS(r_TX_DATA[2], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1L12 is uart_tx:u_TX|Mux0~2
D1L12 = (D1_r_INDEX[1] & ((D1L11 & ((!D1_r_DATA_BUFFER[3]))) # (!D1L11 & (!D1_r_DATA_BUFFER[2])))) # (!D1_r_INDEX[1] & (((D1L11))));


--D1_r_INDEX[2] is uart_tx:u_TX|r_INDEX[2]
--register power-up is low

D1_r_INDEX[2] = DFFEAS(D1L41, i_CLOCK,  ,  , D1L34,  ,  ,  ,  );


--D1L13 is uart_tx:u_TX|Mux0~3
D1L13 = (!D1_r_INDEX[2] & ((D1L10) # ((D1L12 & !D1_r_INDEX[3]))));


--D1_r_DATA_BUFFER[6] is uart_tx:u_TX|r_DATA_BUFFER[6]
--register power-up is low

D1_r_DATA_BUFFER[6] = DFFEAS(r_TX_DATA[5], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1_r_DATA_BUFFER[5] is uart_tx:u_TX|r_DATA_BUFFER[5]
--register power-up is low

D1_r_DATA_BUFFER[5] = DFFEAS(r_TX_DATA[4], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1_r_DATA_BUFFER[4] is uart_tx:u_TX|r_DATA_BUFFER[4]
--register power-up is low

D1_r_DATA_BUFFER[4] = DFFEAS(r_TX_DATA[3], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1L14 is uart_tx:u_TX|Mux0~4
D1L14 = (D1_r_INDEX[1] & (((D1_r_INDEX[0])))) # (!D1_r_INDEX[1] & ((D1_r_INDEX[0] & (!D1_r_DATA_BUFFER[5])) # (!D1_r_INDEX[0] & ((!D1_r_DATA_BUFFER[4])))));


--D1_r_DATA_BUFFER[7] is uart_tx:u_TX|r_DATA_BUFFER[7]
--register power-up is low

D1_r_DATA_BUFFER[7] = DFFEAS(r_TX_DATA[6], i_CLOCK,  ,  , D1L21,  ,  ,  ,  );


--D1L15 is uart_tx:u_TX|Mux0~5
D1L15 = (D1_r_INDEX[1] & ((D1L14 & ((!D1_r_DATA_BUFFER[7]))) # (!D1L14 & (!D1_r_DATA_BUFFER[6])))) # (!D1_r_INDEX[1] & (((D1L14))));


--D1L16 is uart_tx:u_TX|Mux0~6
D1L16 = (!D1L13 & (((D1_r_INDEX[3]) # (!D1L15)) # (!D1_r_INDEX[2])));


--i_CLOCK is i_CLOCK
i_CLOCK = INPUT();


--D1L1 is uart_tx:u_TX|Equal0~0
D1L1 = (D1_r_PRESCALER[0] & (D1_r_PRESCALER[1] & (!D1_r_PRESCALER[7] & !D1_r_PRESCALER[8])));


--D1L2 is uart_tx:u_TX|Equal0~1
D1L2 = (D1_r_PRESCALER[2] & (D1_r_PRESCALER[3] & (D1_r_PRESCALER[5] & !D1_r_PRESCALER[4])));


--D1L3 is uart_tx:u_TX|Equal0~2
D1L3 = (D1_r_PRESCALER[9] & (D1_r_PRESCALER[11] & (!D1_r_PRESCALER[6] & !D1_r_PRESCALER[10])));


--D1L4 is uart_tx:u_TX|Equal0~3
D1L4 = (D1L1 & (D1L2 & (D1L3 & !D1_r_PRESCALER[12])));


--D1L34 is uart_tx:u_TX|r_INDEX[0]~0
D1L34 = (D1_o_BUSY & D1L4);


--C1_r_INDEX[3] is uart_rx:u_RX|r_INDEX[3]
--register power-up is low

C1_r_INDEX[3] = DFFEAS(C1L117, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L10 is uart_rx:u_RX|Equal0~0
C1L10 = (C1_r_PRESCALER[2] & (!C1_r_PRESCALER[0] & (!C1_r_PRESCALER[1] & !C1_r_PRESCALER[3])));


--C1L11 is uart_rx:u_RX|Equal0~1
C1L11 = (C1_r_PRESCALER[6] & (C1_r_PRESCALER[7] & (!C1_r_PRESCALER[4] & !C1_r_PRESCALER[5])));


--C1L12 is uart_rx:u_RX|Equal0~2
C1L12 = (C1_r_PRESCALER[8] & (C1_r_PRESCALER[11] & (!C1_r_PRESCALER[9] & !C1_r_PRESCALER[10])));


--C1L118 is uart_rx:u_RX|r_INDEX~0
C1L118 = (C1_o_BUSY & !C1_r_PRESCALER[12]);


--C1L119 is uart_rx:u_RX|r_INDEX~1
C1L119 = (C1L10 & (C1L11 & (C1L12 & C1L118)));


--C1_r_INDEX[0] is uart_rx:u_RX|r_INDEX[0]
--register power-up is low

C1_r_INDEX[0] = DFFEAS(C1L110, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_INDEX[1] is uart_rx:u_RX|r_INDEX[1]
--register power-up is low

C1_r_INDEX[1] = DFFEAS(C1L112, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_INDEX[2] is uart_rx:u_RX|r_INDEX[2]
--register power-up is low

C1_r_INDEX[2] = DFFEAS(C1L114, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L3 is uart_rx:u_RX|Decoder0~0
C1L3 = (!C1_r_INDEX[1] & !C1_r_INDEX[2]);


--C1L56 is uart_rx:u_RX|MEM_UART~31
C1L56 = (C1_r_INDEX[3] & (C1L119 & ((C1_r_INDEX[0]) # (!C1L3))));


--C1_r_DATA_BUFFER[0] is uart_rx:u_RX|r_DATA_BUFFER[0]
--register power-up is low

C1_r_DATA_BUFFER[0] = DFFEAS(C1L89, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[9] is uart_rx:u_RX|r_DATA_BUFFER[9]
--register power-up is low

C1_r_DATA_BUFFER[9] = DFFEAS(C1L107, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L61 is uart_rx:u_RX|o_sig_CRRP_DATA~0
C1L61 = (C1_o_sig_CRRP_DATA) # ((C1L56 & ((C1_r_DATA_BUFFER[0]) # (!C1_r_DATA_BUFFER[9]))));


--C1L13 is uart_rx:u_RX|Equal0~3
C1L13 = (C1L10 & (C1L11 & (C1L12 & !C1_r_PRESCALER[12])));


--C1L59 is uart_rx:u_RX|o_BUSY~0
C1L59 = (((C1L3 & !C1_r_INDEX[0])) # (!C1L13)) # (!C1_r_INDEX[3]);


--i_RX is i_RX
i_RX = INPUT();


--C1_r_DATA_BUFFER[1] is uart_rx:u_RX|r_DATA_BUFFER[1]
--register power-up is low

C1_r_DATA_BUFFER[1] = DFFEAS(C1L91, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1L57 is uart_rx:u_RX|MEM_UART~32
C1L57 = (C1L56 & (C1_r_DATA_BUFFER[9] & !C1_r_DATA_BUFFER[0]));


--s_allow_press is s_allow_press
--register power-up is low

s_allow_press = DFFEAS(A1L61, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--i_DISPLAY is i_DISPLAY
i_DISPLAY = INPUT();


--A1L106 is p_DISPLAY_RX~0
A1L106 = (s_allow_press & !i_DISPLAY);


--i_DATA[0] is i_DATA[0]
i_DATA[0] = INPUT();


--i_DATA[1] is i_DATA[1]
i_DATA[1] = INPUT();


--i_DATA[2] is i_DATA[2]
i_DATA[2] = INPUT();


--i_DATA[3] is i_DATA[3]
i_DATA[3] = INPUT();


--i_DATA[4] is i_DATA[4]
i_DATA[4] = INPUT();


--i_DATA[5] is i_DATA[5]
i_DATA[5] = INPUT();


--i_DATA[6] is i_DATA[6]
i_DATA[6] = INPUT();


--i_DATA[7] is i_DATA[7]
i_DATA[7] = INPUT();


--C1_r_DATA_BUFFER[2] is uart_rx:u_RX|r_DATA_BUFFER[2]
--register power-up is low

C1_r_DATA_BUFFER[2] = DFFEAS(C1L93, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[3] is uart_rx:u_RX|r_DATA_BUFFER[3]
--register power-up is low

C1_r_DATA_BUFFER[3] = DFFEAS(C1L95, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[4] is uart_rx:u_RX|r_DATA_BUFFER[4]
--register power-up is low

C1_r_DATA_BUFFER[4] = DFFEAS(C1L97, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[5] is uart_rx:u_RX|r_DATA_BUFFER[5]
--register power-up is low

C1_r_DATA_BUFFER[5] = DFFEAS(C1L99, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[6] is uart_rx:u_RX|r_DATA_BUFFER[6]
--register power-up is low

C1_r_DATA_BUFFER[6] = DFFEAS(C1L101, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[7] is uart_rx:u_RX|r_DATA_BUFFER[7]
--register power-up is low

C1_r_DATA_BUFFER[7] = DFFEAS(C1L103, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--C1_r_DATA_BUFFER[8] is uart_rx:u_RX|r_DATA_BUFFER[8]
--register power-up is low

C1_r_DATA_BUFFER[8] = DFFEAS(C1L105, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--D1L38 is uart_tx:u_TX|r_INDEX~1
D1L38 = (D1_r_INDEX[3] & (!D1_r_INDEX[2] & (!D1_r_INDEX[1] & !D1_r_INDEX[0]))) # (!D1_r_INDEX[3] & (D1_r_INDEX[2] & (D1_r_INDEX[1] & D1_r_INDEX[0])));


--D1L39 is uart_tx:u_TX|r_INDEX~2
D1L39 = (!D1_r_INDEX[0] & (((!D1_r_INDEX[2] & !D1_r_INDEX[1])) # (!D1_r_INDEX[3])));


--r_TX_DATA[7] is r_TX_DATA[7]
--register power-up is low

r_TX_DATA[7] = DFFEAS(A1L124, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--s_TX_START is s_TX_START
--register power-up is low

s_TX_START = DFFEAS(A1L107, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--D1L21 is uart_tx:u_TX|process_0~0
D1L21 = (s_TX_START & !D1_o_BUSY);


--D1L40 is uart_tx:u_TX|r_INDEX~3
D1L40 = (!D1_r_INDEX[3] & (D1_r_INDEX[1] $ (D1_r_INDEX[0])));


--r_TX_DATA[1] is r_TX_DATA[1]
--register power-up is low

r_TX_DATA[1] = DFFEAS(A1L112, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--r_TX_DATA[0] is r_TX_DATA[0]
--register power-up is low

r_TX_DATA[0] = DFFEAS(A1L110, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--r_TX_DATA[2] is r_TX_DATA[2]
--register power-up is low

r_TX_DATA[2] = DFFEAS(A1L114, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--D1L41 is uart_tx:u_TX|r_INDEX~4
D1L41 = (!D1_r_INDEX[3] & (D1_r_INDEX[2] $ (((D1_r_INDEX[1] & D1_r_INDEX[0])))));


--r_TX_DATA[5] is r_TX_DATA[5]
--register power-up is low

r_TX_DATA[5] = DFFEAS(A1L120, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--r_TX_DATA[4] is r_TX_DATA[4]
--register power-up is low

r_TX_DATA[4] = DFFEAS(A1L118, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--r_TX_DATA[3] is r_TX_DATA[3]
--register power-up is low

r_TX_DATA[3] = DFFEAS(A1L116, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--r_TX_DATA[6] is r_TX_DATA[6]
--register power-up is low

r_TX_DATA[6] = DFFEAS(A1L122, i_CLOCK,  ,  , A1L107,  ,  ,  ,  );


--D1L9 is uart_tx:u_TX|LessThan1~0
D1L9 = ((!D1_r_INDEX[2] & (!D1_r_INDEX[1] & !D1_r_INDEX[0]))) # (!D1_r_INDEX[3]);


--D1L18 is uart_tx:u_TX|o_BUSY~0
D1L18 = (D1L9) # (!D1L4);


--D1L5 is uart_tx:u_TX|LessThan0~0
D1L5 = (!D1_r_PRESCALER[3] & (((!D1_r_PRESCALER[0] & !D1_r_PRESCALER[1])) # (!D1_r_PRESCALER[2])));


--D1L6 is uart_tx:u_TX|LessThan0~1
D1L6 = ((!D1_r_PRESCALER[5] & ((D1L5) # (!D1_r_PRESCALER[4])))) # (!D1_r_PRESCALER[6]);


--D1L7 is uart_tx:u_TX|LessThan0~2
D1L7 = (D1L6 & (!D1_r_PRESCALER[7] & (!D1_r_PRESCALER[8] & !D1_r_PRESCALER[9])));


--D1L8 is uart_tx:u_TX|LessThan0~3
D1L8 = (D1_r_PRESCALER[12] & ((D1_r_PRESCALER[11]) # ((!D1L7 & D1_r_PRESCALER[10]))));


--C1L120 is uart_rx:u_RX|r_INDEX~2
C1L120 = (C1L119 & (((C1L3 & !C1_r_INDEX[0])) # (!C1_r_INDEX[3])));


--C1L1 is uart_rx:u_RX|Add1~0
C1L1 = C1_r_INDEX[3] $ (((C1_r_INDEX[0] & (C1_r_INDEX[1] & C1_r_INDEX[2]))));


--C1L116 is uart_rx:u_RX|r_INDEX[3]~3
C1L116 = (!C1L120 & ((C1_o_BUSY) # (i_RX)));


--C1L117 is uart_rx:u_RX|r_INDEX[3]~4
C1L117 = (C1_r_INDEX[3] & ((C1L116) # ((C1L120 & C1L1)))) # (!C1_r_INDEX[3] & (C1L120 & (C1L1)));


--C1L14 is uart_rx:u_RX|LessThan0~0
C1L14 = (!C1_r_PRESCALER[3] & (((!C1_r_PRESCALER[2]) # (!C1_r_PRESCALER[1])) # (!C1_r_PRESCALER[0])));


--C1L15 is uart_rx:u_RX|LessThan0~1
C1L15 = ((!C1_r_PRESCALER[5] & ((C1L14) # (!C1_r_PRESCALER[4])))) # (!C1_r_PRESCALER[6]);


--C1L125 is uart_rx:u_RX|r_PRESCALER[0]~19
C1L125 = (!C1_r_PRESCALER[7] & (!C1_r_PRESCALER[8] & !C1_r_PRESCALER[9]));


--C1L126 is uart_rx:u_RX|r_PRESCALER[0]~20
C1L126 = (!C1_r_PRESCALER[11] & (((C1L15 & C1L125)) # (!C1_r_PRESCALER[10])));


--C1L127 is uart_rx:u_RX|r_PRESCALER[0]~21
C1L127 = ((!C1L126 & C1_r_PRESCALER[12])) # (!C1_o_BUSY);


--C1L164 is uart_rx:u_RX|r_PRESCALER~22
C1L164 = (C1_o_BUSY) # (!i_RX);


--C1L110 is uart_rx:u_RX|r_INDEX[0]~5
C1L110 = (C1L120 & (((!C1_r_INDEX[0])))) # (!C1L120 & (C1_r_INDEX[0] & ((C1_o_BUSY) # (i_RX))));


--C1L112 is uart_rx:u_RX|r_INDEX[1]~6
C1L112 = (C1_r_INDEX[1] & ((C1L116) # ((C1L120 & !C1_r_INDEX[0])))) # (!C1_r_INDEX[1] & (((C1L120 & C1_r_INDEX[0]))));


--C1L2 is uart_rx:u_RX|Add1~1
C1L2 = C1_r_INDEX[2] $ (((C1_r_INDEX[0] & C1_r_INDEX[1])));


--C1L114 is uart_rx:u_RX|r_INDEX[2]~7
C1L114 = (C1_r_INDEX[2] & ((C1L116) # ((C1L120 & C1L2)))) # (!C1_r_INDEX[2] & (C1L120 & (C1L2)));


--C1L4 is uart_rx:u_RX|Decoder0~1
C1L4 = (C1_o_BUSY & (!C1_r_INDEX[3] & !C1_r_INDEX[0]));


--C1L89 is uart_rx:u_RX|r_DATA_BUFFER[0]~0
C1L89 = (C1L3 & ((C1L4 & (i_RX)) # (!C1L4 & ((C1_r_DATA_BUFFER[0]))))) # (!C1L3 & (((C1_r_DATA_BUFFER[0]))));


--C1L5 is uart_rx:u_RX|Decoder0~2
C1L5 = (C1_o_BUSY & (C1_r_INDEX[3] & (!C1_r_INDEX[1] & !C1_r_INDEX[2])));


--C1L107 is uart_rx:u_RX|r_DATA_BUFFER[9]~1
C1L107 = (C1_r_INDEX[0] & ((C1L5 & (i_RX)) # (!C1L5 & ((C1_r_DATA_BUFFER[9]))))) # (!C1_r_INDEX[0] & (((C1_r_DATA_BUFFER[9]))));


--C1L6 is uart_rx:u_RX|Decoder0~3
C1L6 = (C1_o_BUSY & (C1_r_INDEX[0] & !C1_r_INDEX[3]));


--C1L91 is uart_rx:u_RX|r_DATA_BUFFER[1]~2
C1L91 = (C1L3 & ((C1L6 & (i_RX)) # (!C1L6 & ((C1_r_DATA_BUFFER[1]))))) # (!C1L3 & (((C1_r_DATA_BUFFER[1]))));


--s_button_counter[2] is s_button_counter[2]
--register power-up is low

s_button_counter[2] = DFFEAS(A1L153, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[3] is s_button_counter[3]
--register power-up is low

s_button_counter[3] = DFFEAS(A1L154, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[0] is s_button_counter[0]
--register power-up is low

s_button_counter[0] = DFFEAS(A1L155, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[1] is s_button_counter[1]
--register power-up is low

s_button_counter[1] = DFFEAS(A1L3, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L53 is Equal0~0
A1L53 = (s_button_counter[2] & (s_button_counter[3] & (!s_button_counter[0] & !s_button_counter[1])));


--s_button_counter[4] is s_button_counter[4]
--register power-up is low

s_button_counter[4] = DFFEAS(A1L156, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[5] is s_button_counter[5]
--register power-up is low

s_button_counter[5] = DFFEAS(A1L11, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[6] is s_button_counter[6]
--register power-up is low

s_button_counter[6] = DFFEAS(A1L13, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[7] is s_button_counter[7]
--register power-up is low

s_button_counter[7] = DFFEAS(A1L15, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L54 is Equal0~1
A1L54 = (s_button_counter[4] & (!s_button_counter[5] & (!s_button_counter[6] & !s_button_counter[7])));


--s_button_counter[8] is s_button_counter[8]
--register power-up is low

s_button_counter[8] = DFFEAS(A1L17, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[9] is s_button_counter[9]
--register power-up is low

s_button_counter[9] = DFFEAS(A1L19, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[10] is s_button_counter[10]
--register power-up is low

s_button_counter[10] = DFFEAS(A1L21, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[11] is s_button_counter[11]
--register power-up is low

s_button_counter[11] = DFFEAS(A1L23, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L55 is Equal0~2
A1L55 = (!s_button_counter[8] & (!s_button_counter[9] & (!s_button_counter[10] & !s_button_counter[11])));


--s_button_counter[12] is s_button_counter[12]
--register power-up is low

s_button_counter[12] = DFFEAS(A1L157, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[13] is s_button_counter[13]
--register power-up is low

s_button_counter[13] = DFFEAS(A1L158, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[14] is s_button_counter[14]
--register power-up is low

s_button_counter[14] = DFFEAS(A1L159, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[15] is s_button_counter[15]
--register power-up is low

s_button_counter[15] = DFFEAS(A1L160, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L56 is Equal0~3
A1L56 = (s_button_counter[12] & (s_button_counter[13] & (s_button_counter[14] & s_button_counter[15])));


--A1L57 is Equal0~4
A1L57 = (A1L53 & (A1L54 & (A1L55 & A1L56)));


--s_button_counter[17] is s_button_counter[17]
--register power-up is low

s_button_counter[17] = DFFEAS(A1L161, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[19] is s_button_counter[19]
--register power-up is low

s_button_counter[19] = DFFEAS(A1L162, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[16] is s_button_counter[16]
--register power-up is low

s_button_counter[16] = DFFEAS(A1L33, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[18] is s_button_counter[18]
--register power-up is low

s_button_counter[18] = DFFEAS(A1L37, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L58 is Equal0~5
A1L58 = (s_button_counter[17] & (s_button_counter[19] & (!s_button_counter[16] & !s_button_counter[18])));


--s_button_counter[20] is s_button_counter[20]
--register power-up is low

s_button_counter[20] = DFFEAS(A1L163, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[21] is s_button_counter[21]
--register power-up is low

s_button_counter[21] = DFFEAS(A1L164, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[22] is s_button_counter[22]
--register power-up is low

s_button_counter[22] = DFFEAS(A1L165, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[23] is s_button_counter[23]
--register power-up is low

s_button_counter[23] = DFFEAS(A1L166, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L59 is Equal0~6
A1L59 = (s_button_counter[20] & (s_button_counter[21] & (s_button_counter[22] & s_button_counter[23])));


--s_button_counter[25] is s_button_counter[25]
--register power-up is low

s_button_counter[25] = DFFEAS(A1L167, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--s_button_counter[24] is s_button_counter[24]
--register power-up is low

s_button_counter[24] = DFFEAS(A1L49, i_CLOCK,  ,  ,  ,  ,  ,  ,  );


--A1L60 is Equal0~7
A1L60 = (s_button_counter[25] & !s_button_counter[24]);


--A1L61 is Equal0~8
A1L61 = (A1L57 & (A1L58 & (A1L59 & A1L60)));


--C1L7 is uart_rx:u_RX|Decoder0~4
C1L7 = (C1_o_BUSY & (C1_r_INDEX[1] & (!C1_r_INDEX[3] & !C1_r_INDEX[0])));


--C1L93 is uart_rx:u_RX|r_DATA_BUFFER[2]~3
C1L93 = (C1L7 & ((C1_r_INDEX[2] & (C1_r_DATA_BUFFER[2])) # (!C1_r_INDEX[2] & ((i_RX))))) # (!C1L7 & (C1_r_DATA_BUFFER[2]));


--C1L8 is uart_rx:u_RX|Decoder0~5
C1L8 = (C1_o_BUSY & (C1_r_INDEX[0] & (C1_r_INDEX[1] & !C1_r_INDEX[3])));


--C1L95 is uart_rx:u_RX|r_DATA_BUFFER[3]~4
C1L95 = (C1L8 & ((C1_r_INDEX[2] & (C1_r_DATA_BUFFER[3])) # (!C1_r_INDEX[2] & ((i_RX))))) # (!C1L8 & (C1_r_DATA_BUFFER[3]));


--C1L9 is uart_rx:u_RX|Decoder0~6
C1L9 = (C1_r_INDEX[2] & !C1_r_INDEX[1]);


--C1L97 is uart_rx:u_RX|r_DATA_BUFFER[4]~5
C1L97 = (C1L4 & ((C1L9 & (i_RX)) # (!C1L9 & ((C1_r_DATA_BUFFER[4]))))) # (!C1L4 & (((C1_r_DATA_BUFFER[4]))));


--C1L99 is uart_rx:u_RX|r_DATA_BUFFER[5]~6
C1L99 = (C1L6 & ((C1L9 & (i_RX)) # (!C1L9 & ((C1_r_DATA_BUFFER[5]))))) # (!C1L6 & (((C1_r_DATA_BUFFER[5]))));


--C1L101 is uart_rx:u_RX|r_DATA_BUFFER[6]~7
C1L101 = (C1_r_INDEX[2] & ((C1L7 & (i_RX)) # (!C1L7 & ((C1_r_DATA_BUFFER[6]))))) # (!C1_r_INDEX[2] & (((C1_r_DATA_BUFFER[6]))));


--C1L103 is uart_rx:u_RX|r_DATA_BUFFER[7]~8
C1L103 = (C1_r_INDEX[2] & ((C1L8 & (i_RX)) # (!C1L8 & ((C1_r_DATA_BUFFER[7]))))) # (!C1_r_INDEX[2] & (((C1_r_DATA_BUFFER[7]))));


--C1L105 is uart_rx:u_RX|r_DATA_BUFFER[8]~9
C1L105 = (C1L5 & ((C1_r_INDEX[0] & (C1_r_DATA_BUFFER[8])) # (!C1_r_INDEX[0] & ((i_RX))))) # (!C1L5 & (C1_r_DATA_BUFFER[8]));


--i_SEND is i_SEND
i_SEND = INPUT();


--A1L107 is p_TRANSMIT~0
A1L107 = (s_allow_press & (!D1_o_BUSY & !i_SEND));


--A1L153 is s_button_counter~0
A1L153 = (A1L5 & !A1L61);


--A1L154 is s_button_counter~1
A1L154 = (A1L7 & !A1L61);


--A1L155 is s_button_counter~2
A1L155 = (A1L1 & !A1L61);


--A1L156 is s_button_counter~3
A1L156 = (A1L9 & !A1L61);


--A1L157 is s_button_counter~4
A1L157 = (A1L25 & !A1L61);


--A1L158 is s_button_counter~5
A1L158 = (A1L27 & !A1L61);


--A1L159 is s_button_counter~6
A1L159 = (A1L29 & !A1L61);


--A1L160 is s_button_counter~7
A1L160 = (A1L31 & !A1L61);


--A1L161 is s_button_counter~8
A1L161 = (A1L35 & !A1L61);


--A1L162 is s_button_counter~9
A1L162 = (A1L39 & !A1L61);


--A1L163 is s_button_counter~10
A1L163 = (A1L41 & !A1L61);


--A1L164 is s_button_counter~11
A1L164 = (A1L43 & !A1L61);


--A1L165 is s_button_counter~12
A1L165 = (A1L45 & !A1L61);


--A1L166 is s_button_counter~13
A1L166 = (A1L47 & !A1L61);


--A1L167 is s_button_counter~14
A1L167 = (A1L51 & !A1L61);


--B1L33 is asciiHex:a2h|Mux5~11
B1L33 = (C1L51) # ((C1L47 & (C1L41Q)) # (!C1L47 & ((F1_ram_block1a7))));


--B1L20 is asciiHex:a2h|Mux3~11
B1L20 = (C1L53 & ((C1L47 & (C1L38Q)) # (!C1L47 & ((F1_ram_block1a4)))));


--B1L39 is asciiHex:a2h|Mux6~9
B1L39 = (!C1L53 & ((C1L47 & (!C1L38Q)) # (!C1L47 & ((!F1_ram_block1a4)))));


--B1L21 is asciiHex:a2h|Mux3~12
B1L21 = (!C1L51 & ((C1L54 & (!C1L53 & !C1L52)) # (!C1L54 & (C1L53 & C1L52))));


--B1L14 is asciiHex:a2h|Mux2~5
B1L14 = (B1L34 & ((C1L47 & (!C1L35Q)) # (!C1L47 & ((!F1_ram_block1a1)))));


--B1L5 is asciiHex:a2h|Mux0~4
B1L5 = (C1L50 & (((!C1L49 & !C1L48)))) # (!C1L50 & (C1L54 $ (((!C1L49 & C1L48)))));


--B1L6 is asciiHex:a2h|Mux0~5
B1L6 = (!C1L51 & ((B1L5) # (C1L54 $ (!C1L53))));


--B1L40 is asciiHex:a2h|Mux6~10
B1L40 = (C1L48 & (!C1L54 & (C1L50 $ (!C1L49)))) # (!C1L48 & (((!C1L50 & !C1L49))));


--B1L41 is asciiHex:a2h|Mux6~11
B1L41 = (!C1L51 & ((B1L40) # (C1L54 $ (!C1L53))));


--A1L124 is r_TX_DATA[7]~0
A1L124 = !i_DATA[7];


--A1L112 is r_TX_DATA[1]~1
A1L112 = !i_DATA[1];


--A1L110 is r_TX_DATA[0]~2
A1L110 = !i_DATA[0];


--A1L114 is r_TX_DATA[2]~3
A1L114 = !i_DATA[2];


--A1L120 is r_TX_DATA[5]~4
A1L120 = !i_DATA[5];


--A1L118 is r_TX_DATA[4]~5
A1L118 = !i_DATA[4];


--A1L116 is r_TX_DATA[3]~6
A1L116 = !i_DATA[3];


--A1L122 is r_TX_DATA[6]~7
A1L122 = !i_DATA[6];


--A1L169 is ~GND
A1L169 = GND;


--A1L83 is i_RX~_wirecell
A1L83 = !i_RX;


--D1L20 is uart_tx:u_TX|o_TX_LINE~_wirecell
D1L20 = !D1_o_TX_LINE;


